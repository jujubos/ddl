Terminals unused in grammar

    DOT


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: definition_or_statement
    2                 | translation_unit definition_or_statement

    3 definition_or_statement: function_definition
    4                        | statement

    5 basic_type_specifier: BOOLEAN_T
    6                     | INT_T
    7                     | DOUBLE_T
    8                     | STRING_T

    9 type_specifier: basic_type_specifier
   10               | type_specifier LB RB

   11 function_definition: type_specifier IDENTIFIER LP parameter_list RP block
   12                    | type_specifier IDENTIFIER LP RP block
   13                    | type_specifier IDENTIFIER LP parameter_list RP SEMICOLON
   14                    | type_specifier IDENTIFIER LP RP SEMICOLON

   15 parameter_list: type_specifier IDENTIFIER
   16               | parameter_list COMMA type_specifier IDENTIFIER

   17 argument_list: assignment_expression
   18              | argument_list COMMA assignment_expression

   19 statement_list: statement
   20               | statement_list statement

   21 expression: assignment_expression
   22           | expression COMMA assignment_expression

   23 assignment_expression: logical_or_expression
   24                      | primary_expression ASSIGN_T assignment_expression
   25                      | primary_expression ADD_ASSIGN_T assignment_expression
   26                      | primary_expression SUB_ASSIGN_T assignment_expression
   27                      | primary_expression MUL_ASSIGN_T assignment_expression
   28                      | primary_expression DIV_ASSIGN_T assignment_expression
   29                      | primary_expression MOD_ASSIGN_T assignment_expression

   30 logical_or_expression: logical_and_expression
   31                      | logical_or_expression LOGICAL_OR logical_and_expression

   32 logical_and_expression: equality_expression
   33                       | logical_and_expression LOGICAL_AND equality_expression

   34 equality_expression: relational_expression
   35                    | equality_expression EQ relational_expression
   36                    | equality_expression NE relational_expression

   37 relational_expression: additive_expression
   38                      | relational_expression GT additive_expression
   39                      | relational_expression GE additive_expression
   40                      | relational_expression LT additive_expression
   41                      | relational_expression LE additive_expression

   42 additive_expression: multiplicative_expression
   43                    | additive_expression ADD multiplicative_expression
   44                    | additive_expression SUB multiplicative_expression

   45 multiplicative_expression: unary_expression
   46                          | multiplicative_expression MUL unary_expression
   47                          | multiplicative_expression DIV unary_expression
   48                          | multiplicative_expression MOD unary_expression

   49 unary_expression: primary_expression
   50                 | SUB unary_expression
   51                 | EXCLAMATION unary_expression

   52 primary_expression: primary_no_new_array
   53                   | array_creation

   54 primary_no_new_array: primary_no_new_array LB expression RB
   55                     | primary_no_new_array LP argument_list RP
   56                     | primary_no_new_array LP RP
   57                     | primary_no_new_array INCREMENT
   58                     | primary_no_new_array DECREMENT
   59                     | LP expression RP
   60                     | IDENTIFIER
   61                     | INT_LITERAL
   62                     | DOUBLE_LITERAL
   63                     | STRING_LITERAL
   64                     | REGEXP_LITERAL
   65                     | TRUE_T
   66                     | FALSE_T
   67                     | NULL_T
   68                     | array_literal

   69 array_literal: LC expression_list RC
   70              | LC expression_list COMMA RC

   71 array_creation: NEW basic_type_specifier dimension_expression_list
   72               | NEW basic_type_specifier dimension_expression_list dimension_list

   73 dimension_expression_list: LB expression RB
   74                          | dimension_expression_list LB expression RB

   75 dimension_list: LB RB
   76               | dimension_list LB RB

   77 expression_list: ε
   78                | assignment_expression
   79                | expression_list COMMA assignment_expression

   80 statement: expression SEMICOLON
   81          | if_statement
   82          | while_statement
   83          | for_statement
   84          | foreach_statement
   85          | return_statement
   86          | break_statement
   87          | continue_statement
   88          | try_statement
   89          | throw_statement
   90          | declaration_statement

   91 if_statement: IF LP expression RP block
   92             | IF LP expression RP block ELSE block
   93             | IF LP expression RP block elif_list
   94             | IF LP expression RP block elif_list ELSE block

   95 elif_list: elif
   96          | elif_list elif

   97 elif: ELSIF LP expression RP block

   98 label_opt: ε
   99          | IDENTIFIER COLON

  100 while_statement: label_opt WHILE LP expression RP block

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

  102 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block

  103 expression_opt: ε
  104               | expression

  105 return_statement: RETURN_T expression_opt SEMICOLON

  106 identifier_opt: ε
  107               | IDENTIFIER

  108 break_statement: BREAK identifier_opt SEMICOLON

  109 continue_statement: CONTINUE identifier_opt SEMICOLON

  110 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY block
  111              | TRY block FINALLY block
  112              | TRY block CATCH LP IDENTIFIER RP block

  113 throw_statement: THROW expression SEMICOLON

  114 declaration_statement: type_specifier IDENTIFIER SEMICOLON
  115                      | type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON

  116 @1: ε

  117 block: LC @1 statement_list RC
  118      | LC RC


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LITERAL <expression> (258) 61
    DOUBLE_LITERAL <expression> (259) 62
    STRING_LITERAL <expression> (260) 63
    REGEXP_LITERAL <expression> (261) 64
    IDENTIFIER <identifier> (262) 11 12 13 14 15 16 60 99 102 107 110 112 114 115
    IF (263) 91 92 93 94
    ELSE (264) 92 94
    ELSIF (265) 97
    WHILE (266) 100
    FOR (267) 101
    FOREACH (268) 102
    RETURN_T (269) 105
    BREAK (270) 108
    CONTINUE (271) 109
    LP (272) 11 12 13 14 55 56 59 91 92 93 94 97 100 101 102 110 112
    RP (273) 11 12 13 14 55 56 59 91 92 93 94 97 100 101 102 110 112
    LC (274) 69 70 117 118
    RC (275) 69 70 117 118
    SEMICOLON (276) 13 14 80 101 105 108 109 113 114 115
    COLON (277) 99 102
    COMMA (278) 16 18 22 70 79
    ASSIGN_T (279) 24 115
    LOGICAL_AND (280) 33
    LOGICAL_OR (281) 31
    EQ (282) 35
    NE (283) 36
    GT (284) 38
    GE (285) 39
    LT (286) 40
    LE (287) 41
    ADD (288) 43
    SUB (289) 44 50
    MUL (290) 46
    DIV (291) 47
    MOD (292) 48
    TRUE_T (293) 65
    FALSE_T (294) 66
    EXCLAMATION (295) 51
    DOT (296)
    ADD_ASSIGN_T (297) 25
    SUB_ASSIGN_T (298) 26
    MUL_ASSIGN_T (299) 27
    DIV_ASSIGN_T (300) 28
    MOD_ASSIGN_T (301) 29
    INCREMENT (302) 57
    DECREMENT (303) 58
    TRY (304) 110 111 112
    CATCH (305) 110 112
    FINALLY (306) 110 111
    THROW (307) 113
    BOOLEAN_T (308) 5
    INT_T (309) 6
    DOUBLE_T (310) 7
    STRING_T (311) 8
    LB (312) 10 54 73 74 75 76
    RB (313) 10 54 73 74 75 76
    NULL_T (314) 67
    NEW (315) 71 72


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    translation_unit (62)
        on left: 1 2
        on right: 0 2
    definition_or_statement (63)
        on left: 3 4
        on right: 1 2
    basic_type_specifier <basic_type> (64)
        on left: 5 6 7 8
        on right: 9 71 72
    type_specifier <type_specifier> (65)
        on left: 9 10
        on right: 10 11 12 13 14 15 16 114 115
    function_definition (66)
        on left: 11 12 13 14
        on right: 3
    parameter_list <parameter_list> (67)
        on left: 15 16
        on right: 11 13 16
    argument_list <argument_list> (68)
        on left: 17 18
        on right: 18 55
    statement_list (69)
        on left: 19 20
        on right: 20 117
    expression <expression> (70)
        on left: 21 22
        on right: 22 54 59 73 74 80 91 92 93 94 97 100 102 104 113 115
    assignment_expression <expression> (71)
        on left: 23 24 25 26 27 28 29
        on right: 17 18 21 22 24 25 26 27 28 29 78 79
    logical_or_expression <expression> (72)
        on left: 30 31
        on right: 23 31
    logical_and_expression <expression> (73)
        on left: 32 33
        on right: 30 31 33
    equality_expression <expression> (74)
        on left: 34 35 36
        on right: 32 33 35 36
    relational_expression <expression> (75)
        on left: 37 38 39 40 41
        on right: 34 35 36 38 39 40 41
    additive_expression <expression> (76)
        on left: 42 43 44
        on right: 37 38 39 40 41 43 44
    multiplicative_expression <expression> (77)
        on left: 45 46 47 48
        on right: 42 43 44 46 47 48
    unary_expression <expression> (78)
        on left: 49 50 51
        on right: 45 46 47 48 50 51
    primary_expression <expression> (79)
        on left: 52 53
        on right: 24 25 26 27 28 29 49
    primary_no_new_array <expression> (80)
        on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
        on right: 52 54 55 56 57 58
    array_literal <expression> (81)
        on left: 69 70
        on right: 68
    array_creation <expression> (82)
        on left: 71 72
        on right: 53
    dimension_expression_list <dimension_expression_list> (83)
        on left: 73 74
        on right: 71 72 74
    dimension_list <dimension_list> (84)
        on left: 75 76
        on right: 72 76
    expression_list <expression_list> (85)
        on left: 77 78 79
        on right: 69 70 79
    statement <statement> (86)
        on left: 80 81 82 83 84 85 86 87 88 89 90
        on right: 4 19 20
    if_statement <statement> (87)
        on left: 91 92 93 94
        on right: 81
    elif_list <elif> (88)
        on left: 95 96
        on right: 93 94 96
    elif <elif> (89)
        on left: 97
        on right: 95 96
    label_opt <identifier> (90)
        on left: 98 99
        on right: 100 101 102
    while_statement <statement> (91)
        on left: 100
        on right: 82
    for_statement <statement> (92)
        on left: 101
        on right: 83
    foreach_statement <statement> (93)
        on left: 102
        on right: 84
    expression_opt <expression> (94)
        on left: 103 104
        on right: 101 105
    return_statement <statement> (95)
        on left: 105
        on right: 85
    identifier_opt <identifier> (96)
        on left: 106 107
        on right: 108 109
    break_statement <statement> (97)
        on left: 108
        on right: 86
    continue_statement <statement> (98)
        on left: 109
        on right: 87
    try_statement <statement> (99)
        on left: 110 111 112
        on right: 88
    throw_statement <statement> (100)
        on left: 113
        on right: 89
    declaration_statement <statement> (101)
        on left: 114 115
        on right: 90
    block <block> (102)
        on left: 117 118
        on right: 11 12 91 92 93 94 97 100 101 102 110 111 112
    @1 (103)
        on left: 116
        on right: 117


State 0

    0 $accept: • translation_unit $end

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    TRY             shift, and go to state 16
    THROW           shift, and go to state 17
    BOOLEAN_T       shift, and go to state 18
    INT_T           shift, and go to state 19
    DOUBLE_T        shift, and go to state 20
    STRING_T        shift, and go to state 21
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 98 (label_opt)

    translation_unit           go to state 24
    definition_or_statement    go to state 25
    basic_type_specifier       go to state 26
    type_specifier             go to state 27
    function_definition        go to state 28
    expression                 go to state 29
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    statement                  go to state 42
    if_statement               go to state 43
    label_opt                  go to state 44
    while_statement            go to state 45
    for_statement              go to state 46
    foreach_statement          go to state 47
    return_statement           go to state 48
    break_statement            go to state 49
    continue_statement         go to state 50
    try_statement              go to state 51
    throw_statement            go to state 52
    declaration_statement      go to state 53


State 1

   61 primary_no_new_array: INT_LITERAL •

    $default  reduce using rule 61 (primary_no_new_array)


State 2

   62 primary_no_new_array: DOUBLE_LITERAL •

    $default  reduce using rule 62 (primary_no_new_array)


State 3

   63 primary_no_new_array: STRING_LITERAL •

    $default  reduce using rule 63 (primary_no_new_array)


State 4

   64 primary_no_new_array: REGEXP_LITERAL •

    $default  reduce using rule 64 (primary_no_new_array)


State 5

   60 primary_no_new_array: IDENTIFIER •
   99 label_opt: IDENTIFIER • COLON

    COLON  shift, and go to state 54

    $default  reduce using rule 60 (primary_no_new_array)


State 6

   91 if_statement: IF • LP expression RP block
   92             | IF • LP expression RP block ELSE block
   93             | IF • LP expression RP block elif_list
   94             | IF • LP expression RP block elif_list ELSE block

    LP  shift, and go to state 55


State 7

  105 return_statement: RETURN_T • expression_opt SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 103 (expression_opt)

    expression                 go to state 57
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    expression_opt             go to state 58


State 8

  108 break_statement: BREAK • identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 106 (identifier_opt)

    identifier_opt  go to state 60


State 9

  109 continue_statement: CONTINUE • identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 106 (identifier_opt)

    identifier_opt  go to state 61


State 10

   59 primary_no_new_array: LP • expression RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 62
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 11

   69 array_literal: LC • expression_list RC
   70              | LC • expression_list COMMA RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 77 (expression_list)

    assignment_expression      go to state 63
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    expression_list            go to state 64


State 12

   50 unary_expression: SUB • unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    unary_expression      go to state 65
    primary_expression    go to state 66
    primary_no_new_array  go to state 39
    array_literal         go to state 40
    array_creation        go to state 41


State 13

   65 primary_no_new_array: TRUE_T •

    $default  reduce using rule 65 (primary_no_new_array)


State 14

   66 primary_no_new_array: FALSE_T •

    $default  reduce using rule 66 (primary_no_new_array)


State 15

   51 unary_expression: EXCLAMATION • unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    unary_expression      go to state 67
    primary_expression    go to state 66
    primary_no_new_array  go to state 39
    array_literal         go to state 40
    array_creation        go to state 41


State 16

  110 try_statement: TRY • block CATCH LP IDENTIFIER RP block FINALLY block
  111              | TRY • block FINALLY block
  112              | TRY • block CATCH LP IDENTIFIER RP block

    LC  shift, and go to state 68

    block  go to state 69


State 17

  113 throw_statement: THROW • expression SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 70
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 18

    5 basic_type_specifier: BOOLEAN_T •

    $default  reduce using rule 5 (basic_type_specifier)


State 19

    6 basic_type_specifier: INT_T •

    $default  reduce using rule 6 (basic_type_specifier)


State 20

    7 basic_type_specifier: DOUBLE_T •

    $default  reduce using rule 7 (basic_type_specifier)


State 21

    8 basic_type_specifier: STRING_T •

    $default  reduce using rule 8 (basic_type_specifier)


State 22

   67 primary_no_new_array: NULL_T •

    $default  reduce using rule 67 (primary_no_new_array)


State 23

   71 array_creation: NEW • basic_type_specifier dimension_expression_list
   72               | NEW • basic_type_specifier dimension_expression_list dimension_list

    BOOLEAN_T  shift, and go to state 18
    INT_T      shift, and go to state 19
    DOUBLE_T   shift, and go to state 20
    STRING_T   shift, and go to state 21

    basic_type_specifier  go to state 71


State 24

    0 $accept: translation_unit • $end
    2 translation_unit: translation_unit • definition_or_statement

    $end            shift, and go to state 72
    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    TRY             shift, and go to state 16
    THROW           shift, and go to state 17
    BOOLEAN_T       shift, and go to state 18
    INT_T           shift, and go to state 19
    DOUBLE_T        shift, and go to state 20
    STRING_T        shift, and go to state 21
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 98 (label_opt)

    definition_or_statement    go to state 73
    basic_type_specifier       go to state 26
    type_specifier             go to state 27
    function_definition        go to state 28
    expression                 go to state 29
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    statement                  go to state 42
    if_statement               go to state 43
    label_opt                  go to state 44
    while_statement            go to state 45
    for_statement              go to state 46
    foreach_statement          go to state 47
    return_statement           go to state 48
    break_statement            go to state 49
    continue_statement         go to state 50
    try_statement              go to state 51
    throw_statement            go to state 52
    declaration_statement      go to state 53


State 25

    1 translation_unit: definition_or_statement •

    $default  reduce using rule 1 (translation_unit)


State 26

    9 type_specifier: basic_type_specifier •

    $default  reduce using rule 9 (type_specifier)


State 27

   10 type_specifier: type_specifier • LB RB
   11 function_definition: type_specifier • IDENTIFIER LP parameter_list RP block
   12                    | type_specifier • IDENTIFIER LP RP block
   13                    | type_specifier • IDENTIFIER LP parameter_list RP SEMICOLON
   14                    | type_specifier • IDENTIFIER LP RP SEMICOLON
  114 declaration_statement: type_specifier • IDENTIFIER SEMICOLON
  115                      | type_specifier • IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 74
    LB          shift, and go to state 75


State 28

    3 definition_or_statement: function_definition •

    $default  reduce using rule 3 (definition_or_statement)


State 29

   22 expression: expression • COMMA assignment_expression
   80 statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 76
    COMMA      shift, and go to state 77


State 30

   21 expression: assignment_expression •

    $default  reduce using rule 21 (expression)


State 31

   23 assignment_expression: logical_or_expression •
   31 logical_or_expression: logical_or_expression • LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 78

    $default  reduce using rule 23 (assignment_expression)


State 32

   30 logical_or_expression: logical_and_expression •
   33 logical_and_expression: logical_and_expression • LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 79

    $default  reduce using rule 30 (logical_or_expression)


State 33

   32 logical_and_expression: equality_expression •
   35 equality_expression: equality_expression • EQ relational_expression
   36                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 80
    NE  shift, and go to state 81

    $default  reduce using rule 32 (logical_and_expression)


State 34

   34 equality_expression: relational_expression •
   38 relational_expression: relational_expression • GT additive_expression
   39                      | relational_expression • GE additive_expression
   40                      | relational_expression • LT additive_expression
   41                      | relational_expression • LE additive_expression

    GT  shift, and go to state 82
    GE  shift, and go to state 83
    LT  shift, and go to state 84
    LE  shift, and go to state 85

    $default  reduce using rule 34 (equality_expression)


State 35

   37 relational_expression: additive_expression •
   43 additive_expression: additive_expression • ADD multiplicative_expression
   44                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 37 (relational_expression)


State 36

   42 additive_expression: multiplicative_expression •
   46 multiplicative_expression: multiplicative_expression • MUL unary_expression
   47                          | multiplicative_expression • DIV unary_expression
   48                          | multiplicative_expression • MOD unary_expression

    MUL  shift, and go to state 88
    DIV  shift, and go to state 89
    MOD  shift, and go to state 90

    $default  reduce using rule 42 (additive_expression)


State 37

   45 multiplicative_expression: unary_expression •

    $default  reduce using rule 45 (multiplicative_expression)


State 38

   24 assignment_expression: primary_expression • ASSIGN_T assignment_expression
   25                      | primary_expression • ADD_ASSIGN_T assignment_expression
   26                      | primary_expression • SUB_ASSIGN_T assignment_expression
   27                      | primary_expression • MUL_ASSIGN_T assignment_expression
   28                      | primary_expression • DIV_ASSIGN_T assignment_expression
   29                      | primary_expression • MOD_ASSIGN_T assignment_expression
   49 unary_expression: primary_expression •

    ASSIGN_T      shift, and go to state 91
    ADD_ASSIGN_T  shift, and go to state 92
    SUB_ASSIGN_T  shift, and go to state 93
    MUL_ASSIGN_T  shift, and go to state 94
    DIV_ASSIGN_T  shift, and go to state 95
    MOD_ASSIGN_T  shift, and go to state 96

    $default  reduce using rule 49 (unary_expression)


State 39

   52 primary_expression: primary_no_new_array •
   54 primary_no_new_array: primary_no_new_array • LB expression RB
   55                     | primary_no_new_array • LP argument_list RP
   56                     | primary_no_new_array • LP RP
   57                     | primary_no_new_array • INCREMENT
   58                     | primary_no_new_array • DECREMENT

    LP         shift, and go to state 97
    INCREMENT  shift, and go to state 98
    DECREMENT  shift, and go to state 99
    LB         shift, and go to state 100

    $default  reduce using rule 52 (primary_expression)


State 40

   68 primary_no_new_array: array_literal •

    $default  reduce using rule 68 (primary_no_new_array)


State 41

   53 primary_expression: array_creation •

    $default  reduce using rule 53 (primary_expression)


State 42

    4 definition_or_statement: statement •

    $default  reduce using rule 4 (definition_or_statement)


State 43

   81 statement: if_statement •

    $default  reduce using rule 81 (statement)


State 44

  100 while_statement: label_opt • WHILE LP expression RP block
  101 for_statement: label_opt • FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block
  102 foreach_statement: label_opt • FOREACH LP IDENTIFIER COLON expression RP block

    WHILE    shift, and go to state 101
    FOR      shift, and go to state 102
    FOREACH  shift, and go to state 103


State 45

   82 statement: while_statement •

    $default  reduce using rule 82 (statement)


State 46

   83 statement: for_statement •

    $default  reduce using rule 83 (statement)


State 47

   84 statement: foreach_statement •

    $default  reduce using rule 84 (statement)


State 48

   85 statement: return_statement •

    $default  reduce using rule 85 (statement)


State 49

   86 statement: break_statement •

    $default  reduce using rule 86 (statement)


State 50

   87 statement: continue_statement •

    $default  reduce using rule 87 (statement)


State 51

   88 statement: try_statement •

    $default  reduce using rule 88 (statement)


State 52

   89 statement: throw_statement •

    $default  reduce using rule 89 (statement)


State 53

   90 statement: declaration_statement •

    $default  reduce using rule 90 (statement)


State 54

   99 label_opt: IDENTIFIER COLON •

    $default  reduce using rule 99 (label_opt)


State 55

   91 if_statement: IF LP • expression RP block
   92             | IF LP • expression RP block ELSE block
   93             | IF LP • expression RP block elif_list
   94             | IF LP • expression RP block elif_list ELSE block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 104
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 56

   60 primary_no_new_array: IDENTIFIER •

    $default  reduce using rule 60 (primary_no_new_array)


State 57

   22 expression: expression • COMMA assignment_expression
  104 expression_opt: expression •

    COMMA  shift, and go to state 77

    $default  reduce using rule 104 (expression_opt)


State 58

  105 return_statement: RETURN_T expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 105


State 59

  107 identifier_opt: IDENTIFIER •

    $default  reduce using rule 107 (identifier_opt)


State 60

  108 break_statement: BREAK identifier_opt • SEMICOLON

    SEMICOLON  shift, and go to state 106


State 61

  109 continue_statement: CONTINUE identifier_opt • SEMICOLON

    SEMICOLON  shift, and go to state 107


State 62

   22 expression: expression • COMMA assignment_expression
   59 primary_no_new_array: LP expression • RP

    RP     shift, and go to state 108
    COMMA  shift, and go to state 77


State 63

   78 expression_list: assignment_expression •

    $default  reduce using rule 78 (expression_list)


State 64

   69 array_literal: LC expression_list • RC
   70              | LC expression_list • COMMA RC
   79 expression_list: expression_list • COMMA assignment_expression

    RC     shift, and go to state 109
    COMMA  shift, and go to state 110


State 65

   50 unary_expression: SUB unary_expression •

    $default  reduce using rule 50 (unary_expression)


State 66

   49 unary_expression: primary_expression •

    $default  reduce using rule 49 (unary_expression)


State 67

   51 unary_expression: EXCLAMATION unary_expression •

    $default  reduce using rule 51 (unary_expression)


State 68

  117 block: LC • @1 statement_list RC
  118      | LC • RC

    RC  shift, and go to state 111

    $default  reduce using rule 116 (@1)

    @1  go to state 112


State 69

  110 try_statement: TRY block • CATCH LP IDENTIFIER RP block FINALLY block
  111              | TRY block • FINALLY block
  112              | TRY block • CATCH LP IDENTIFIER RP block

    CATCH    shift, and go to state 113
    FINALLY  shift, and go to state 114


State 70

   22 expression: expression • COMMA assignment_expression
  113 throw_statement: THROW expression • SEMICOLON

    SEMICOLON  shift, and go to state 115
    COMMA      shift, and go to state 77


State 71

   71 array_creation: NEW basic_type_specifier • dimension_expression_list
   72               | NEW basic_type_specifier • dimension_expression_list dimension_list

    LB  shift, and go to state 116

    dimension_expression_list  go to state 117


State 72

    0 $accept: translation_unit $end •

    $default  accept


State 73

    2 translation_unit: translation_unit definition_or_statement •

    $default  reduce using rule 2 (translation_unit)


State 74

   11 function_definition: type_specifier IDENTIFIER • LP parameter_list RP block
   12                    | type_specifier IDENTIFIER • LP RP block
   13                    | type_specifier IDENTIFIER • LP parameter_list RP SEMICOLON
   14                    | type_specifier IDENTIFIER • LP RP SEMICOLON
  114 declaration_statement: type_specifier IDENTIFIER • SEMICOLON
  115                      | type_specifier IDENTIFIER • ASSIGN_T expression SEMICOLON

    LP         shift, and go to state 118
    SEMICOLON  shift, and go to state 119
    ASSIGN_T   shift, and go to state 120


State 75

   10 type_specifier: type_specifier LB • RB

    RB  shift, and go to state 121


State 76

   80 statement: expression SEMICOLON •

    $default  reduce using rule 80 (statement)


State 77

   22 expression: expression COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 122
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 78

   31 logical_or_expression: logical_or_expression LOGICAL_OR • logical_and_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    logical_and_expression     go to state 123
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 79

   33 logical_and_expression: logical_and_expression LOGICAL_AND • equality_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    equality_expression        go to state 124
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 80

   35 equality_expression: equality_expression EQ • relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    relational_expression      go to state 125
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 81

   36 equality_expression: equality_expression NE • relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    relational_expression      go to state 126
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 82

   38 relational_expression: relational_expression GT • additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    additive_expression        go to state 127
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 83

   39 relational_expression: relational_expression GE • additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    additive_expression        go to state 128
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 84

   40 relational_expression: relational_expression LT • additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    additive_expression        go to state 129
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 85

   41 relational_expression: relational_expression LE • additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    additive_expression        go to state 130
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 86

   43 additive_expression: additive_expression ADD • multiplicative_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    multiplicative_expression  go to state 131
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 87

   44 additive_expression: additive_expression SUB • multiplicative_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    multiplicative_expression  go to state 132
    unary_expression           go to state 37
    primary_expression         go to state 66
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 88

   46 multiplicative_expression: multiplicative_expression MUL • unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    unary_expression      go to state 133
    primary_expression    go to state 66
    primary_no_new_array  go to state 39
    array_literal         go to state 40
    array_creation        go to state 41


State 89

   47 multiplicative_expression: multiplicative_expression DIV • unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    unary_expression      go to state 134
    primary_expression    go to state 66
    primary_no_new_array  go to state 39
    array_literal         go to state 40
    array_creation        go to state 41


State 90

   48 multiplicative_expression: multiplicative_expression MOD • unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    unary_expression      go to state 135
    primary_expression    go to state 66
    primary_no_new_array  go to state 39
    array_literal         go to state 40
    array_creation        go to state 41


State 91

   24 assignment_expression: primary_expression ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 136
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 92

   25 assignment_expression: primary_expression ADD_ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 137
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 93

   26 assignment_expression: primary_expression SUB_ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 138
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 94

   27 assignment_expression: primary_expression MUL_ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 139
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 95

   28 assignment_expression: primary_expression DIV_ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 140
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 96

   29 assignment_expression: primary_expression MOD_ASSIGN_T • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 141
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 97

   55 primary_no_new_array: primary_no_new_array LP • argument_list RP
   56                     | primary_no_new_array LP • RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    RP              shift, and go to state 142
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    argument_list              go to state 143
    assignment_expression      go to state 144
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 98

   57 primary_no_new_array: primary_no_new_array INCREMENT •

    $default  reduce using rule 57 (primary_no_new_array)


State 99

   58 primary_no_new_array: primary_no_new_array DECREMENT •

    $default  reduce using rule 58 (primary_no_new_array)


State 100

   54 primary_no_new_array: primary_no_new_array LB • expression RB

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 145
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 101

  100 while_statement: label_opt WHILE • LP expression RP block

    LP  shift, and go to state 146


State 102

  101 for_statement: label_opt FOR • LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    LP  shift, and go to state 147


State 103

  102 foreach_statement: label_opt FOREACH • LP IDENTIFIER COLON expression RP block

    LP  shift, and go to state 148


State 104

   22 expression: expression • COMMA assignment_expression
   91 if_statement: IF LP expression • RP block
   92             | IF LP expression • RP block ELSE block
   93             | IF LP expression • RP block elif_list
   94             | IF LP expression • RP block elif_list ELSE block

    RP     shift, and go to state 149
    COMMA  shift, and go to state 77


State 105

  105 return_statement: RETURN_T expression_opt SEMICOLON •

    $default  reduce using rule 105 (return_statement)


State 106

  108 break_statement: BREAK identifier_opt SEMICOLON •

    $default  reduce using rule 108 (break_statement)


State 107

  109 continue_statement: CONTINUE identifier_opt SEMICOLON •

    $default  reduce using rule 109 (continue_statement)


State 108

   59 primary_no_new_array: LP expression RP •

    $default  reduce using rule 59 (primary_no_new_array)


State 109

   69 array_literal: LC expression_list RC •

    $default  reduce using rule 69 (array_literal)


State 110

   70 array_literal: LC expression_list COMMA • RC
   79 expression_list: expression_list COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    RC              shift, and go to state 150
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 151
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 111

  118 block: LC RC •

    $default  reduce using rule 118 (block)


State 112

  117 block: LC @1 • statement_list RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    TRY             shift, and go to state 16
    THROW           shift, and go to state 17
    BOOLEAN_T       shift, and go to state 18
    INT_T           shift, and go to state 19
    DOUBLE_T        shift, and go to state 20
    STRING_T        shift, and go to state 21
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 98 (label_opt)

    basic_type_specifier       go to state 26
    type_specifier             go to state 152
    statement_list             go to state 153
    expression                 go to state 29
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    statement                  go to state 154
    if_statement               go to state 43
    label_opt                  go to state 44
    while_statement            go to state 45
    for_statement              go to state 46
    foreach_statement          go to state 47
    return_statement           go to state 48
    break_statement            go to state 49
    continue_statement         go to state 50
    try_statement              go to state 51
    throw_statement            go to state 52
    declaration_statement      go to state 53


State 113

  110 try_statement: TRY block CATCH • LP IDENTIFIER RP block FINALLY block
  112              | TRY block CATCH • LP IDENTIFIER RP block

    LP  shift, and go to state 155


State 114

  111 try_statement: TRY block FINALLY • block

    LC  shift, and go to state 68

    block  go to state 156


State 115

  113 throw_statement: THROW expression SEMICOLON •

    $default  reduce using rule 113 (throw_statement)


State 116

   73 dimension_expression_list: LB • expression RB

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 157
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 117

   71 array_creation: NEW basic_type_specifier dimension_expression_list •
   72               | NEW basic_type_specifier dimension_expression_list • dimension_list
   74 dimension_expression_list: dimension_expression_list • LB expression RB

    LB  shift, and go to state 158

    $default  reduce using rule 71 (array_creation)

    dimension_list  go to state 159


State 118

   11 function_definition: type_specifier IDENTIFIER LP • parameter_list RP block
   12                    | type_specifier IDENTIFIER LP • RP block
   13                    | type_specifier IDENTIFIER LP • parameter_list RP SEMICOLON
   14                    | type_specifier IDENTIFIER LP • RP SEMICOLON

    RP         shift, and go to state 160
    BOOLEAN_T  shift, and go to state 18
    INT_T      shift, and go to state 19
    DOUBLE_T   shift, and go to state 20
    STRING_T   shift, and go to state 21

    basic_type_specifier  go to state 26
    type_specifier        go to state 161
    parameter_list        go to state 162


State 119

  114 declaration_statement: type_specifier IDENTIFIER SEMICOLON •

    $default  reduce using rule 114 (declaration_statement)


State 120

  115 declaration_statement: type_specifier IDENTIFIER ASSIGN_T • expression SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 163
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 121

   10 type_specifier: type_specifier LB RB •

    $default  reduce using rule 10 (type_specifier)


State 122

   22 expression: expression COMMA assignment_expression •

    $default  reduce using rule 22 (expression)


State 123

   31 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression •
   33 logical_and_expression: logical_and_expression • LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 79

    $default  reduce using rule 31 (logical_or_expression)


State 124

   33 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression •
   35 equality_expression: equality_expression • EQ relational_expression
   36                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 80
    NE  shift, and go to state 81

    $default  reduce using rule 33 (logical_and_expression)


State 125

   35 equality_expression: equality_expression EQ relational_expression •
   38 relational_expression: relational_expression • GT additive_expression
   39                      | relational_expression • GE additive_expression
   40                      | relational_expression • LT additive_expression
   41                      | relational_expression • LE additive_expression

    GT  shift, and go to state 82
    GE  shift, and go to state 83
    LT  shift, and go to state 84
    LE  shift, and go to state 85

    $default  reduce using rule 35 (equality_expression)


State 126

   36 equality_expression: equality_expression NE relational_expression •
   38 relational_expression: relational_expression • GT additive_expression
   39                      | relational_expression • GE additive_expression
   40                      | relational_expression • LT additive_expression
   41                      | relational_expression • LE additive_expression

    GT  shift, and go to state 82
    GE  shift, and go to state 83
    LT  shift, and go to state 84
    LE  shift, and go to state 85

    $default  reduce using rule 36 (equality_expression)


State 127

   38 relational_expression: relational_expression GT additive_expression •
   43 additive_expression: additive_expression • ADD multiplicative_expression
   44                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 38 (relational_expression)


State 128

   39 relational_expression: relational_expression GE additive_expression •
   43 additive_expression: additive_expression • ADD multiplicative_expression
   44                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 39 (relational_expression)


State 129

   40 relational_expression: relational_expression LT additive_expression •
   43 additive_expression: additive_expression • ADD multiplicative_expression
   44                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 40 (relational_expression)


State 130

   41 relational_expression: relational_expression LE additive_expression •
   43 additive_expression: additive_expression • ADD multiplicative_expression
   44                    | additive_expression • SUB multiplicative_expression

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 41 (relational_expression)


State 131

   43 additive_expression: additive_expression ADD multiplicative_expression •
   46 multiplicative_expression: multiplicative_expression • MUL unary_expression
   47                          | multiplicative_expression • DIV unary_expression
   48                          | multiplicative_expression • MOD unary_expression

    MUL  shift, and go to state 88
    DIV  shift, and go to state 89
    MOD  shift, and go to state 90

    $default  reduce using rule 43 (additive_expression)


State 132

   44 additive_expression: additive_expression SUB multiplicative_expression •
   46 multiplicative_expression: multiplicative_expression • MUL unary_expression
   47                          | multiplicative_expression • DIV unary_expression
   48                          | multiplicative_expression • MOD unary_expression

    MUL  shift, and go to state 88
    DIV  shift, and go to state 89
    MOD  shift, and go to state 90

    $default  reduce using rule 44 (additive_expression)


State 133

   46 multiplicative_expression: multiplicative_expression MUL unary_expression •

    $default  reduce using rule 46 (multiplicative_expression)


State 134

   47 multiplicative_expression: multiplicative_expression DIV unary_expression •

    $default  reduce using rule 47 (multiplicative_expression)


State 135

   48 multiplicative_expression: multiplicative_expression MOD unary_expression •

    $default  reduce using rule 48 (multiplicative_expression)


State 136

   24 assignment_expression: primary_expression ASSIGN_T assignment_expression •

    $default  reduce using rule 24 (assignment_expression)


State 137

   25 assignment_expression: primary_expression ADD_ASSIGN_T assignment_expression •

    $default  reduce using rule 25 (assignment_expression)


State 138

   26 assignment_expression: primary_expression SUB_ASSIGN_T assignment_expression •

    $default  reduce using rule 26 (assignment_expression)


State 139

   27 assignment_expression: primary_expression MUL_ASSIGN_T assignment_expression •

    $default  reduce using rule 27 (assignment_expression)


State 140

   28 assignment_expression: primary_expression DIV_ASSIGN_T assignment_expression •

    $default  reduce using rule 28 (assignment_expression)


State 141

   29 assignment_expression: primary_expression MOD_ASSIGN_T assignment_expression •

    $default  reduce using rule 29 (assignment_expression)


State 142

   56 primary_no_new_array: primary_no_new_array LP RP •

    $default  reduce using rule 56 (primary_no_new_array)


State 143

   18 argument_list: argument_list • COMMA assignment_expression
   55 primary_no_new_array: primary_no_new_array LP argument_list • RP

    RP     shift, and go to state 164
    COMMA  shift, and go to state 165


State 144

   17 argument_list: assignment_expression •

    $default  reduce using rule 17 (argument_list)


State 145

   22 expression: expression • COMMA assignment_expression
   54 primary_no_new_array: primary_no_new_array LB expression • RB

    COMMA  shift, and go to state 77
    RB     shift, and go to state 166


State 146

  100 while_statement: label_opt WHILE LP • expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 167
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 147

  101 for_statement: label_opt FOR LP • expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 103 (expression_opt)

    expression                 go to state 57
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    expression_opt             go to state 168


State 148

  102 foreach_statement: label_opt FOREACH LP • IDENTIFIER COLON expression RP block

    IDENTIFIER  shift, and go to state 169


State 149

   91 if_statement: IF LP expression RP • block
   92             | IF LP expression RP • block ELSE block
   93             | IF LP expression RP • block elif_list
   94             | IF LP expression RP • block elif_list ELSE block

    LC  shift, and go to state 68

    block  go to state 170


State 150

   70 array_literal: LC expression_list COMMA RC •

    $default  reduce using rule 70 (array_literal)


State 151

   79 expression_list: expression_list COMMA assignment_expression •

    $default  reduce using rule 79 (expression_list)


State 152

   10 type_specifier: type_specifier • LB RB
  114 declaration_statement: type_specifier • IDENTIFIER SEMICOLON
  115                      | type_specifier • IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 171
    LB          shift, and go to state 75


State 153

   20 statement_list: statement_list • statement
  117 block: LC @1 statement_list • RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    RC              shift, and go to state 172
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    TRY             shift, and go to state 16
    THROW           shift, and go to state 17
    BOOLEAN_T       shift, and go to state 18
    INT_T           shift, and go to state 19
    DOUBLE_T        shift, and go to state 20
    STRING_T        shift, and go to state 21
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 98 (label_opt)

    basic_type_specifier       go to state 26
    type_specifier             go to state 152
    expression                 go to state 29
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    statement                  go to state 173
    if_statement               go to state 43
    label_opt                  go to state 44
    while_statement            go to state 45
    for_statement              go to state 46
    foreach_statement          go to state 47
    return_statement           go to state 48
    break_statement            go to state 49
    continue_statement         go to state 50
    try_statement              go to state 51
    throw_statement            go to state 52
    declaration_statement      go to state 53


State 154

   19 statement_list: statement •

    $default  reduce using rule 19 (statement_list)


State 155

  110 try_statement: TRY block CATCH LP • IDENTIFIER RP block FINALLY block
  112              | TRY block CATCH LP • IDENTIFIER RP block

    IDENTIFIER  shift, and go to state 174


State 156

  111 try_statement: TRY block FINALLY block •

    $default  reduce using rule 111 (try_statement)


State 157

   22 expression: expression • COMMA assignment_expression
   73 dimension_expression_list: LB expression • RB

    COMMA  shift, and go to state 77
    RB     shift, and go to state 175


State 158

   74 dimension_expression_list: dimension_expression_list LB • expression RB
   75 dimension_list: LB • RB

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    RB              shift, and go to state 176
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 177
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 159

   72 array_creation: NEW basic_type_specifier dimension_expression_list dimension_list •
   76 dimension_list: dimension_list • LB RB

    LB  shift, and go to state 178

    $default  reduce using rule 72 (array_creation)


State 160

   12 function_definition: type_specifier IDENTIFIER LP RP • block
   14                    | type_specifier IDENTIFIER LP RP • SEMICOLON

    LC         shift, and go to state 68
    SEMICOLON  shift, and go to state 179

    block  go to state 180


State 161

   10 type_specifier: type_specifier • LB RB
   15 parameter_list: type_specifier • IDENTIFIER

    IDENTIFIER  shift, and go to state 181
    LB          shift, and go to state 75


State 162

   11 function_definition: type_specifier IDENTIFIER LP parameter_list • RP block
   13                    | type_specifier IDENTIFIER LP parameter_list • RP SEMICOLON
   16 parameter_list: parameter_list • COMMA type_specifier IDENTIFIER

    RP     shift, and go to state 182
    COMMA  shift, and go to state 183


State 163

   22 expression: expression • COMMA assignment_expression
  115 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression • SEMICOLON

    SEMICOLON  shift, and go to state 184
    COMMA      shift, and go to state 77


State 164

   55 primary_no_new_array: primary_no_new_array LP argument_list RP •

    $default  reduce using rule 55 (primary_no_new_array)


State 165

   18 argument_list: argument_list COMMA • assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    assignment_expression      go to state 185
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 166

   54 primary_no_new_array: primary_no_new_array LB expression RB •

    $default  reduce using rule 54 (primary_no_new_array)


State 167

   22 expression: expression • COMMA assignment_expression
  100 while_statement: label_opt WHILE LP expression • RP block

    RP     shift, and go to state 186
    COMMA  shift, and go to state 77


State 168

  101 for_statement: label_opt FOR LP expression_opt • SEMICOLON expression_opt SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 187


State 169

  102 foreach_statement: label_opt FOREACH LP IDENTIFIER • COLON expression RP block

    COLON  shift, and go to state 188


State 170

   91 if_statement: IF LP expression RP block •
   92             | IF LP expression RP block • ELSE block
   93             | IF LP expression RP block • elif_list
   94             | IF LP expression RP block • elif_list ELSE block

    ELSE   shift, and go to state 189
    ELSIF  shift, and go to state 190

    $default  reduce using rule 91 (if_statement)

    elif_list  go to state 191
    elif       go to state 192


State 171

  114 declaration_statement: type_specifier IDENTIFIER • SEMICOLON
  115                      | type_specifier IDENTIFIER • ASSIGN_T expression SEMICOLON

    SEMICOLON  shift, and go to state 119
    ASSIGN_T   shift, and go to state 120


State 172

  117 block: LC @1 statement_list RC •

    $default  reduce using rule 117 (block)


State 173

   20 statement_list: statement_list statement •

    $default  reduce using rule 20 (statement_list)


State 174

  110 try_statement: TRY block CATCH LP IDENTIFIER • RP block FINALLY block
  112              | TRY block CATCH LP IDENTIFIER • RP block

    RP  shift, and go to state 193


State 175

   73 dimension_expression_list: LB expression RB •

    $default  reduce using rule 73 (dimension_expression_list)


State 176

   75 dimension_list: LB RB •

    $default  reduce using rule 75 (dimension_list)


State 177

   22 expression: expression • COMMA assignment_expression
   74 dimension_expression_list: dimension_expression_list LB expression • RB

    COMMA  shift, and go to state 77
    RB     shift, and go to state 194


State 178

   76 dimension_list: dimension_list LB • RB

    RB  shift, and go to state 195


State 179

   14 function_definition: type_specifier IDENTIFIER LP RP SEMICOLON •

    $default  reduce using rule 14 (function_definition)


State 180

   12 function_definition: type_specifier IDENTIFIER LP RP block •

    $default  reduce using rule 12 (function_definition)


State 181

   15 parameter_list: type_specifier IDENTIFIER •

    $default  reduce using rule 15 (parameter_list)


State 182

   11 function_definition: type_specifier IDENTIFIER LP parameter_list RP • block
   13                    | type_specifier IDENTIFIER LP parameter_list RP • SEMICOLON

    LC         shift, and go to state 68
    SEMICOLON  shift, and go to state 196

    block  go to state 197


State 183

   16 parameter_list: parameter_list COMMA • type_specifier IDENTIFIER

    BOOLEAN_T  shift, and go to state 18
    INT_T      shift, and go to state 19
    DOUBLE_T   shift, and go to state 20
    STRING_T   shift, and go to state 21

    basic_type_specifier  go to state 26
    type_specifier        go to state 198


State 184

  115 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON •

    $default  reduce using rule 115 (declaration_statement)


State 185

   18 argument_list: argument_list COMMA assignment_expression •

    $default  reduce using rule 18 (argument_list)


State 186

  100 while_statement: label_opt WHILE LP expression RP • block

    LC  shift, and go to state 68

    block  go to state 199


State 187

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON • expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 103 (expression_opt)

    expression                 go to state 57
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    expression_opt             go to state 200


State 188

  102 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON • expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 201
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 189

   92 if_statement: IF LP expression RP block ELSE • block

    LC  shift, and go to state 68

    block  go to state 202


State 190

   97 elif: ELSIF • LP expression RP block

    LP  shift, and go to state 203


State 191

   93 if_statement: IF LP expression RP block elif_list •
   94             | IF LP expression RP block elif_list • ELSE block
   96 elif_list: elif_list • elif

    ELSE   shift, and go to state 204
    ELSIF  shift, and go to state 190

    $default  reduce using rule 93 (if_statement)

    elif  go to state 205


State 192

   95 elif_list: elif •

    $default  reduce using rule 95 (elif_list)


State 193

  110 try_statement: TRY block CATCH LP IDENTIFIER RP • block FINALLY block
  112              | TRY block CATCH LP IDENTIFIER RP • block

    LC  shift, and go to state 68

    block  go to state 206


State 194

   74 dimension_expression_list: dimension_expression_list LB expression RB •

    $default  reduce using rule 74 (dimension_expression_list)


State 195

   76 dimension_list: dimension_list LB RB •

    $default  reduce using rule 76 (dimension_list)


State 196

   13 function_definition: type_specifier IDENTIFIER LP parameter_list RP SEMICOLON •

    $default  reduce using rule 13 (function_definition)


State 197

   11 function_definition: type_specifier IDENTIFIER LP parameter_list RP block •

    $default  reduce using rule 11 (function_definition)


State 198

   10 type_specifier: type_specifier • LB RB
   16 parameter_list: parameter_list COMMA type_specifier • IDENTIFIER

    IDENTIFIER  shift, and go to state 207
    LB          shift, and go to state 75


State 199

  100 while_statement: label_opt WHILE LP expression RP block •

    $default  reduce using rule 100 (while_statement)


State 200

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt • SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 208


State 201

   22 expression: expression • COMMA assignment_expression
  102 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression • RP block

    RP     shift, and go to state 209
    COMMA  shift, and go to state 77


State 202

   92 if_statement: IF LP expression RP block ELSE block •

    $default  reduce using rule 92 (if_statement)


State 203

   97 elif: ELSIF LP • expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    expression                 go to state 210
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41


State 204

   94 if_statement: IF LP expression RP block elif_list ELSE • block

    LC  shift, and go to state 68

    block  go to state 211


State 205

   96 elif_list: elif_list elif •

    $default  reduce using rule 96 (elif_list)


State 206

  110 try_statement: TRY block CATCH LP IDENTIFIER RP block • FINALLY block
  112              | TRY block CATCH LP IDENTIFIER RP block •

    FINALLY  shift, and go to state 212

    $default  reduce using rule 112 (try_statement)


State 207

   16 parameter_list: parameter_list COMMA type_specifier IDENTIFIER •

    $default  reduce using rule 16 (parameter_list)


State 208

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON • expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 56
    LP              shift, and go to state 10
    LC              shift, and go to state 11
    SUB             shift, and go to state 12
    TRUE_T          shift, and go to state 13
    FALSE_T         shift, and go to state 14
    EXCLAMATION     shift, and go to state 15
    NULL_T          shift, and go to state 22
    NEW             shift, and go to state 23

    $default  reduce using rule 103 (expression_opt)

    expression                 go to state 57
    assignment_expression      go to state 30
    logical_or_expression      go to state 31
    logical_and_expression     go to state 32
    equality_expression        go to state 33
    relational_expression      go to state 34
    additive_expression        go to state 35
    multiplicative_expression  go to state 36
    unary_expression           go to state 37
    primary_expression         go to state 38
    primary_no_new_array       go to state 39
    array_literal              go to state 40
    array_creation             go to state 41
    expression_opt             go to state 213


State 209

  102 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP • block

    LC  shift, and go to state 68

    block  go to state 214


State 210

   22 expression: expression • COMMA assignment_expression
   97 elif: ELSIF LP expression • RP block

    RP     shift, and go to state 215
    COMMA  shift, and go to state 77


State 211

   94 if_statement: IF LP expression RP block elif_list ELSE block •

    $default  reduce using rule 94 (if_statement)


State 212

  110 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY • block

    LC  shift, and go to state 68

    block  go to state 216


State 213

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt • RP block

    RP  shift, and go to state 217


State 214

  102 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block •

    $default  reduce using rule 102 (foreach_statement)


State 215

   97 elif: ELSIF LP expression RP • block

    LC  shift, and go to state 68

    block  go to state 218


State 216

  110 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY block •

    $default  reduce using rule 110 (try_statement)


State 217

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP • block

    LC  shift, and go to state 68

    block  go to state 219


State 218

   97 elif: ELSIF LP expression RP block •

    $default  reduce using rule 97 (elif)


State 219

  101 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block •

    $default  reduce using rule 101 (for_statement)
